DROP TABLE IF EXISTS public.users CASCADE;
DROP TABLE IF EXISTS job_request CASCADE;
DROP TABLE IF EXISTS job_offer CASCADE;
DROP TABLE IF EXISTS request_bids CASCADE;
DROP TABLE IF EXISTS offer_bids CASCADE;
DROP TABLE IF EXISTS request_in_progress CASCADE;
DROP TABLE IF EXISTS offer_in_progress CASCADE;
DROP TABLE IF EXISTS request_completed CASCADE;
DROP TABLE IF EXISTS offer_completed CASCADE;

DROP FUNCTION IF EXISTS offer_bid_accepted_func();
DROP TRIGGER IF EXISTS offer_bid_accepted_trigger ON offer_in_progress;

CREATE TABLE public.users (
	"username" CHAR(64),
	"email" CHAR(128),
	"password" CHAR(60),
	CONSTRAINT users_pkey PRIMARY KEY (username)
);


CREATE TABLE job_request (
	"job" CHAR(64),
	"loc" CHAR(128),
	"date" DATE,
	"var" TIME,
	"desc" CHAR(128),
	"username" CHAR (64) references public.users(username),
	"job_id" int generated by default as identity primary key
);



CREATE TABLE request_bids(
	"job_id" int references job_request(job_id),
	"bid_user" char(64) references public.users(username),
	"bid_price" int,
	"bid_info" char(1000),
	"bid_id" int generated by default as identity primary key
);


CREATE TABLE job_offer (
	"job" CHAR(64),
	"loc" CHAR(128),
	"date" DATE,
	"var" TIME,
	"desc" CHAR(128),
	"username" CHAR (128),
	"job_id" int generated by default as identity primary key
);

CREATE TABLE offer_bids(
	"job_id" int references job_offer(job_id),
	"bid_user" char(64) references public.users(username),
	"bid_price" int,
	"bid_info" char(1000),
	"bid_id" int generated by default as identity primary key
);

-- relation set between job req and request bids
CREATE TABLE request_in_progress(
	"job_id" int references job_request(job_id),
	"bid_id" int references request_bids(bid_id),
	primary key (job_id, bid_id)
);

-- relation set between job offer and offer bids
CREATE TABLE offer_in_progress(
	"job_id" int references job_offer(job_id),
	"bid_id" int references offer_bids(bid_id),
	primary key (job_id, bid_id)
);

-- relation set between job req and completed
CREATE TABLE request_completed(
	"job_id" int references job_request(job_id),
	"bid_id" int references request_bids(bid_id),
	primary key (job_id, bid_id)
);

-- relation set between job offer and completed
CREATE TABLE offer_completed(
	"job_id" int references job_offer(job_id),
	"bid_id" int references offer_bids(bid_id),
	primary key (job_id, bid_id)
);

CREATE FUNCTION deleteRequestIP()
RETURNS TRIGGER AS $$
BEGIN
DELETE FROM request_in_progress WHERE job_id=NEW.job_id;
RETURN NEW; END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER deleteRequestIP
AFTER INSERT ON request_completed
FOR EACH ROW
EXECUTE PROCEDURE deleteRequestIP();

CREATE FUNCTION deleteOfferIP()
RETURNS TRIGGER AS $$
BEGIN
DELETE FROM offer_in_progress WHERE job_id=NEW.job_id;
RETURN NEW; END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER deleteOfferIP
AFTER INSERT ON offer_completed
FOR EACH ROW
EXECUTE PROCEDURE deleteOfferIP();

INSERT INTO public.users (username, email, password)
VALUES ('dummy1','dummy1@yahoo.com','$2b$10$99cAtaDvYXFAJCMOqGavCuML5dCdlDYZoAEYfwVXu/ASZpKiAGPnS');
INSERT INTO public.users (username, email, password)
VALUES ('dummy2','dummy2@yahoo.com','$2b$10$99cAtaDvYXFAJCMOqGavCuDrC4GADX0PaHFJ8M08gTnAsBiE2LCwW');
INSERT INTO public.users (username, email, password)
VALUES ('d1','d1@d.com','$2b$10$Ou8cxsjo/m5tLOWIaXemtu8fdCWc/gjKRQxQeEn2xSS0Vq6x.RVu2');
INSERT INTO public.users (username, email, password)
VALUES ('d2','d2@d.com','$2b$10$Ou8cxsjo/m5tLOWIaXemtu9VpzH09heAebhxKAp5c8kPnJ5ulFSTW');
INSERT INTO public.users (username, email, password)
VALUES ('d3','d3@d.com','$2b$10$Ou8cxsjo/m5tLOWIaXemtu0JXiq52DXyEHzAR465mFOPiJyKO.PJa');
INSERT INTO public.users (username, email, password)
VALUES ('d4','d4@d.com','$2b$10$Ou8cxsjo/m5tLOWIaXemtu0fbe4TdOMlTAzSazUwXVlN95vQLhRZO');

INSERT INTO job_request ("job", "loc", "date", "var", "desc","username") 
VALUES ('Babysitting', 'AMK', '2019-08-13', '05:30', 'Look after 4yo','dummy1');
INSERT INTO job_request ("job", "loc", "date", "var", "desc","username") 
VALUES ('Gardening', 'TPY', '2019-08-15', '08:30', 'Rebuild my backyard','dummy2');
INSERT INTO job_request ("job", "loc", "date", "var", "desc","username") 
VALUES ('Cooking', 'JE', '2019-08-25', '18:30', 'Cook dinner for family of 5','dummy1');
INSERT INTO job_request ("job", "loc", "date", "var", "desc","username") 
VALUES ('Delivery', 'KR', '2019-12-01', '12:30', 'Deliver parcel from Changi to Kent Ridge','dummy1');
INSERT INTO job_request ("job", "loc", "date", "var", "desc","username") 
VALUES ('Food Delivery', 'KR', '2019-12-01', '18:30', 'Deliver food from Atlas Cafe to NUS','dummy1');

--job_id 1
INSERT INTO job_offer ("job", "loc", "date", "var", "desc","username") 
VALUES ('Assemble Furniture', 'AMK', '2019-08-05', '16:30', 'Help to assemble IKEA book shelf','dummy1');
INSERT INTO job_offer ("job", "loc", "date", "var", "desc","username") 
VALUES ('Drive', 'CMW', '2019-08-19', '08:30', 'Drive me to Changi Airport','dummy1');
INSERT INTO job_offer ("job", "loc", "date", "var", "desc","username") 
VALUES ('Babysitting', 'BG', '2019-08-25', '19:00', 'Look after my 3yo','dummy2');
INSERT INTO job_offer ("job", "loc", "date", "var", "desc","username") 
VALUES ('Delivery', 'KR', '2019-12-01', '12:30', 'Deliver parcel from Jurong East to Kent Ridge','dummy2');
INSERT INTO job_offer ("job", "loc", "date", "var", "desc","username") 
VALUES ('Delivery', 'KR', '2019-12-01', '12:30', 'Deliver parcel from Jurong East to Kent Ridge','d1');
INSERT INTO job_offer ("job", "loc", "date", "var", "desc","username") 
VALUES ('Delivery', 'KR', '2019-12-01', '12:30', 'Deliver parcel from Jurong East to Kent Ridge','d1');
INSERT INTO job_offer ("job", "loc", "date", "var", "desc","username") 
VALUES ('Delivery', 'KR', '2019-12-01', '12:30', 'Deliver parcel from Jurong East to Kent Ridge','d2');
--job_id 8 (below)
INSERT INTO job_offer ("job", "loc", "date", "var", "desc","username") 
VALUES ('Delivery', 'KR', '2019-12-01', '12:30', 'Give you food','d2');
INSERT INTO job_offer ("job", "loc", "date", "var", "desc","username") 
VALUES ('Delivery', 'KR', '2019-12-01', '12:30', 'Give you durian','d2');
INSERT INTO job_offer ("job", "loc", "date", "var", "desc","username") 
VALUES ('Delivery', 'KR', '2019-12-01', '12:30', 'Deliver parcel from Jurong East to Kent Ridge','d3');
INSERT INTO job_offer ("job", "loc", "date", "var", "desc","username") 
VALUES ('Delivery', 'KR', '2019-12-01', '12:30', 'Eat with you','d3');
INSERT INTO job_offer ("job", "loc", "date", "var", "desc","username") 
VALUES ('Delivery', 'KR', '2019-12-01', '12:30', 'Deliver some fruits','d3');
INSERT INTO job_offer ("job", "loc", "date", "var", "desc","username") 
VALUES ('Delivery', 'KR', '2019-12-01', '12:30', 'Deliver parcel from Jurong East to Kent Ridge','d4');

--bid_id 1
insert into REQUEST_BIDS values ('1','dummy2','1','tested bid');

--job_request > request_bid > request_completed sets
--job_id 6
INSERT INTO job_request ("job", "loc", "date", "var", "desc","username") 
VALUES ('Feeding', 'AMK', '2019-08-13', '05:30', 'feed me pls','d1');
--bid_id 2
INSERT INTO request_bids ("job_id", "bid_user", "bid_price", "bid_info")
VALUES ('6', 'd2', '20', 'feed you anyday');
INSERT INTO request_completed ("job_id", "bid_id")
VALUES ('6', '2');

--job_id 7
INSERT INTO job_request ("job", "loc", "date", "var", "desc","username") 
VALUES ('Feed Kids', 'BSH', '2019-07-15', '05:30', 'im hungryy','d1');
--bid_id 3
INSERT INTO request_bids ("job_id", "bid_user", "bid_price", "bid_info")
VALUES ('7', 'd3', '15', 'im hungryyyy too but ill feed you');
INSERT INTO request_completed ("job_id", "bid_id")
VALUES ('7', '3');

--offer_bids > offer_completed (the job_offer is already specified above)
--bid_id 1
INSERT INTO offer_bids ("job_id", "bid_user", "bid_price", "bid_info")
VALUES ('8', 'd1', '15', 'me want food real bad');
INSERT INTO offer_completed ("job_id", "bid_id")
VALUES ('8', '1');

--bid_id 2
INSERT INTO offer_bids ("job_id", "bid_user", "bid_price", "bid_info")
VALUES ('9', 'd1', '15', 'I need and want food real bad');
INSERT INTO offer_completed ("job_id", "bid_id")
VALUES ('9', '2');

--bid_id 3
INSERT INTO offer_bids ("job_id", "bid_user", "bid_price", "bid_info")
VALUES ('12', 'd1', '15', 'me want food real bad');
INSERT INTO offer_completed ("job_id", "bid_id")
VALUES ('12', '3');

--test values for trigger testing
--job id 14
INSERT INTO job_offer ("job", "loc", "date", "var", "desc","username") 
VALUES ('Delivery', 'KR', '2019-12-01', '12:30', 'bid for me plz','d4');
--bid id 4, 5, 6, 7
INSERT INTO offer_bids ("job_id", "bid_user", "bid_price", "bid_info")
VALUES ('14', 'd1', '15', 'me want food real bad');
INSERT INTO offer_bids ("job_id", "bid_user", "bid_price", "bid_info")
VALUES ('14', 'd2', '20', 'me am d2 mad hungz');
INSERT INTO offer_bids ("job_id", "bid_user", "bid_price", "bid_info")
VALUES ('14', 'd3', '100', 'me am d3 soooo hungz');
INSERT INTO offer_bids ("job_id", "bid_user", "bid_price", "bid_info")
VALUES ('13', 'd1', '12', 'me am d1 soooo hungz');

--job_id 8
INSERT INTO job_request ("job", "loc", "date", "var", "desc","username") 
VALUES ('Feed Kids', 'BSH', '2019-05-15', '12:30', 'im hungryy','d1');
--bid_id 4
INSERT INTO request_bids ("job_id", "bid_user", "bid_price", "bid_info")
VALUES ('8', 'd4', '22', 'im lovely too but ill feed you with makan');
INSERT INTO request_completed ("job_id", "bid_id")
VALUES ('8', '4');




--TRIGGER for job offers. Trigger will fire when a job offer is accepted: i.e.
--when a row is inserted into offer_in_progress. Trigger will cause unaccepted
--bids to be deleted.
CREATE OR REPLACE FUNCTION offer_bid_accepted_func()
RETURNS TRIGGER AS $$
BEGIN
	DELETE FROM offer_bids ob 
	WHERE ob.job_id = NEW.job_id
	AND ob.bid_id != NEW.bid_id;
	RAISE NOTICE 'new job id = %, new bid id =  %', NEW.job_id, NEW.bid_id;
	RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER offer_bid_accepted_trigger
AFTER INSERT ON offer_in_progress
FOR EACH ROW
EXECUTE PROCEDURE offer_bid_accepted_func();

--TRIGGER for job requests. Trigger will fire when a job request is accepted:
--ie when a row is inserted into offer_in_progress. Trigger will cause unaccepted
--bids to be deleted. 
CREATE OR REPLACE FUNCTION request_bid_accepted_func()
RETURNS TRIGGER AS $$
BEGIN
	DELETE FROM request_bids rb 
	WHERE rb.job_id = NEW.job_id
	AND rb.bid_id != NEW.bid_id;
	RAISE NOTICE 'new job id = %, new bid id =  %', NEW.job_id, NEW.bid_id;
	RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER request_bid_accepted_trigger
AFTER INSERT ON request_in_progress
FOR EACH ROW
EXECUTE PROCEDURE request_bid_accepted_func();
